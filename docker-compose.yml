version: '3'
volumes:
  psqldata: {} #remember to rename each time  and change it also in the folloing psql servicecs
  #esdata: {}
services:
  frontend:
   image: node:alpine #Docker will choose the node:alpine image to build this env. You can choose node:lts, node:latest but I prefer alpine as it's small in size and suitable for production as well.
   container_name: vite_frontend
   entrypoint: /bin/sh
   ports:
     - "3000:3000"
   working_dir: /srv/app #working_dir is the directory for the project within the container. When you log into the container, you will land in this directory.
   #!and be careful working_dir is only the default PATH while you login in , the command you execute is still base on the conatainer root path
   volumes: #allow us to use the host file within the container and we will be able to work on it by building or restarting the container.
     - type: bind
       source: ./frontend #the directory of the project on the host
       target: /srv/app #the directory of the project on the container
   command: npm i && npm run dev #the command to run when the container is built
   tty: true #The tty is used to run the container continuously. If you don't use it, the container will stop after running the command.

  backend:
    build:
      context: .
      dockerfile: django_backend/docker/Dockerfile
    image: django_image # Name of the image
    volumes:
      - ./django_backend:/app #!the root directory of backend on the host will be mounted to /app folder on the container , that  means contents synchroneous
    depends_on:
      - postgres
      #- elasticsearch
    env_file: .env
    ports:
      - "8000:8000"
    command: /start  #command to run the container base on container root path since we already copied the start script to the root path of the container


  postgres:
    image: postgres
    env_file: .env
    volumes:
      - psqldata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
#By default, the context is set to the directory where the Docker Compose file is located. However, you can specify a different directory as the build context by setting the context attribute for a service in the Docker Compose file.
#  elasticsearch:
#    image: elasticsearch:7.6.2
#    volumes:
#      - esdata:/usr/share/elasticsearch/data
#    environment:
#      - discovery.type=single-node
#      - ES_JAVA_OPTS=-Xms2g -Xmx2g
#    ports:
#      - "9200:9200"
#
#  kibana:
#    image: kibana:7.6.2
#    depends_on:
#      - elasticsearch
#    ports:
#      - "5601:5601"

